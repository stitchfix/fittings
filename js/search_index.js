var search_data = {"index":{"searchIndex":["hash","setting","alreadyloaded","fileerror","notfound","[]()","available_settings()","collapse_hashes()","has_key?()","load()","load()","loaded?()","method_missing()","new()","recursive_merge!()","reload()","value_for()","readme"],"longSearchIndex":["hash","setting","setting::alreadyloaded","setting::fileerror","setting::notfound","setting::[]()","setting::available_settings()","setting#collapse_hashes()","setting#has_key?()","setting#load()","setting::load()","setting#loaded?()","setting::method_missing()","setting::new()","hash#recursive_merge!()","setting::reload()","setting#value_for()",""],"info":[["Hash","","Hash.html","",""],["Setting","","Setting.html","",""],["Setting::AlreadyLoaded","","Setting/AlreadyLoaded.html","",""],["Setting::FileError","","Setting/FileError.html","",""],["Setting::NotFound","","Setting/NotFound.html","",""],["[]","Setting","Setting.html#method-c-5B-5D","(value)","<p>In [] invocation syntax, we return settings value &#39;as is&#39; without\nHash conversions.\n<p>For example, …\n"],["available_settings","Setting","Setting.html#method-c-available_settings","()","<p><strong>DEPRECATED:</strong> Please use <code>method accessors</code>\ninstead.\n"],["collapse_hashes","Setting","Setting.html#method-i-collapse_hashes","(v, args)","<p>This method performs collapsing of the Hash settings values if the Hash\ncontains &#39;default&#39; value, …\n"],["has_key?","Setting","Setting.html#method-i-has_key-3F","(key)",""],["load","Setting","Setting.html#method-i-load","(params)",""],["load","Setting","Setting.html#method-c-load","(args = {})","<p>This method can be called only once.\n<p>Parameter hash looks like this:\n\n<pre>{  :files =&gt; [ &quot;file1.yml&quot;, &quot;file2.yml&quot;, ...</pre>\n"],["loaded?","Setting","Setting.html#method-i-loaded-3F","()",""],["method_missing","Setting","Setting.html#method-c-method_missing","(method, *args, &block)","<p>In Method invocation syntax we collapse Hash values and return a single\nvalue if &#39;default&#39; is …\n"],["new","Setting","Setting.html#method-c-new","()","<p>\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Instance</span> <span class=\"ruby-constant\">Methods</span>\n</pre>\n<p>\n"],["recursive_merge!","Hash","Hash.html#method-i-recursive_merge-21","(other)",""],["reload","Setting","Setting.html#method-c-reload","(args = {})",""],["value_for","Setting","Setting.html#method-i-value_for","(key, args = [])",""],["README","","README_rdoc.html","","<p>fittings\n<p>This is a fork of ModCloth&#39;s mc-settings gem which has gone\nunmaintained and has deprection …\n"]]}}